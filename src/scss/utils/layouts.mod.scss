//    _                            _
//   | |    __ _ _   _  ___  _   _| |_ ___
//   | |   / _` | | | |/ _ \| | | | __/ __|
//   | |__| (_| | |_| | (_) | |_| | |_\__ \
//   |_____\__,_|\__, |\___/ \__,_|\__|___/
//               |___/
////////////////////////////////////////////////////////////////////////////////////////////////////////

// Dependencies
@import 'error.mod';

// -----------------------------------------------------------------------------------------------------
/// Determines the standard unit of measurement.
/// @type pixels
/// @group util_layouts
$unit: 24px;

// -----------------------------------------------------------------------------------------------------
/// Short for a standard 1/2.
/// @type unitless
/// @group util_layouts
$half: math.div(1, 2);

// -----------------------------------------------------------------------------------------------------
/// Short for a standard 1/3.
/// @type unitless
/// @group util_layouts
$third: math.div(1, 3);

// -----------------------------------------------------------------------------------------------------
/// Short for a standard 1/4.
/// @type unitless
/// @group util_layouts
$quarter: math.div(1, 4);

// -----------------------------------------------------------------------------------------------------
/// Short for a standard 1/6.
/// @type unitless
/// @group util_layouts
$sixth: math.div(1, 6);

// -----------------------------------------------------------------------------------------------------
/// Short for a standard 1/8.
/// @type unitless
/// @group util_layouts
$eighth: math.div(1, 8);

// -----------------------------------------------------------------------------------------------------
/// Short for a standard 1/12.
/// @type unitless
/// @group util_layouts
$twelfth: math.div(1, 12);

// -----------------------------------------------------------------------------------------------------
/// Looks for a standard size by it's name.
/// @param {string} $multiplier [0] - T
/// @example scss - Sass
///   div {
///     margin: unit-x(1) unit-x(2) unit-x(4) unit-x(8);
///     padding: unit-x($half) unit-x($third) unit-x($quarter) unit-x($sixth);
///   }
/// @example css - Compiled CSS
///   div {
///     margin 24px 48px 96px 192px;
///     padding: 12px 8px 6px 4px;
///   }
/// @group util_layouts
@function unit-x($multiplier: 0) {
  /// @todo check for unitless number.
  @return $unit * $multiplier;
}

// -----------------------------------------------------------------------------------------------------
/// Contains the minimum width value for the standard spaces.
/// @type map
/// @group util_layouts
$sizes: (
  hand: 320px,
  page: 600px,
  book: 900px,
  desk: 1200px,
  wide: 1800px
);

// -----------------------------------------------------------------------------------------------------
/// Looks for a standard size by it's name.
/// @param {string} $size ['hand'] - The name of a particular size, it must be an index of the [`$sizes`](#util_layouts-variable-sizes) map.
/// @example scss - Sass
///   div {
///     width: size('book');
///   }
/// @example css - Compiled CSS
///   div {
///     width: 900px;
///   }
/// @group util_layouts
@function size($size: 'hand') {
  @if (map-has-key($sizes, $size)) {
    @return map-get($sizes, $size);
  } @else {
    @return throw('The size named "#{$size}" was not found.', indexing);
  }
}

// -----------------------------------------------------------------------------------------------------
/// Contains the maximum width value for the standard spaces.
/// @type map
/// @group util_layouts
$max-sizes: (
  hand: 599px,
  page: 899px,
  book: 1199px,
  desk: 1799px,
  wide: 3000px
);

// -----------------------------------------------------------------------------------------------------
/// Looks for a standard size by it's name.
/// @param {string} $max-size ['hand'] - The name of a particular size, it must be an index of the [`$max-sizes`](#util_layouts-variable-max-sizes) map.
/// @example scss - Sass
///   div {
///     width: max-size('book');
///   }
/// @example css - Compiled CSS
///   div {
///     width: 1199px;
///   }
/// @group util_layouts
@function max-size($max-size: 'hand') {
  @if (map-has-key($max-sizes, $max-size)) {
    @return map-get($max-sizes, $max-size);
  } @else {
    @return throw('The max-size named "#{$max-size}" was not found.', indexing);
  }
}

// -----------------------------------------------------------------------------------------------------
/// @deprecated
/// Looks for a the limit value of a space's width. Default returns the lower limit, the $max variable
/// controls when to return the upper limit.
/// @param {string} space [null] - Name of the space that needs to be measured.
/// @param {bool} max [false] - Returns the upper limit of the space's width.
/// @example scss - Sass
///   div {
///     &.min {
///       width: measure($space: hand);
///     }
///     &.max {
///       width: measure($space: hand, $max: true);
///     }
///   }
/// @example css - Compiled CSS
///   div.min {
///     width: 320px;
///   }
///   div.max {
///     width: 599px;
///   }
/// @group util_layouts
@function measure($space: null, $max: false) {
  @if ($max) {
    @if (map-has-key($max-sizes, $space)) {
      @return map-get($max-sizes, $space);
    } @else {
      @return throw('Unknown space size selected.', value);
    }
  } @else {
    @if (map-has-key($sizes, $space)) {
      @return map-get($sizes, $space);
    } @else {
      @return throw('Unknown space size selected.', value);
    }
  }
}

// -----------------------------------------------------------------------------------------------------
/// Creates the correct media query according to a space size input. The exact values will be the limits of said space in pixels. Devices with screens smaller than `320px` are not going to be handled y the [`display-on()`](#util_layouts-mixin-display-on) mixin. Correct input values are: hand, page, book, desk, and wide.
/// @param {string} size [null] - Viewport size that will be used to create a media query as a lower limit.
/// @param {string} until [null] - [Optional] higher limit for the viewport.
/// @content
/// @output - Media query with a range width according to standard of space sizes.
/// @example scss - Sass
///   div {
///     @include display-on(page, $until: desk) {
///       // Style
///     }
///   }
/// @example css - Compiled CSS
///   div {
///     @media (min-width: 600px) and (max-width: 1799px) {
///       // Style
///     }
///   }
/// @group util_layouts
@mixin display-on($size, $until: null) {
  // Will contain the interior of the media query or will remain null in case of an exception.
  $mq: null;
  @if ($size == $until) {
    content: throw(
      'This media query has redundant information. ‘display-on(#{$size})’',
      value
    );
  } @else if ($size == hand) and ($until == wide) {
    content: throw(
      'This media query is redundant, it includes all devices.',
      value
    );
  }
  @if $until {
    // Obtains pixel values
    $s-device: size($size);
    $l-until: max-size($until);
    // Value validation
    @if ($s-device > $l-until) {
      content: throw(
        'Did you mean ‘display-on(#{$until}, $until: #{$size})’? This media query contains wrong syntax, the value of the ‘until’ parameter should be larger than the value of the ‘size’ parameter.',
        value
      );
    }
    // Buids media query
    $mq: '(min-width: #{$s-device}) and (max-width: #{$l-until})';
  } @else {
    // Obtains pixel values
    $s-device: size($size);
    $l-device: max-size($size);
    // Buids media query
    $mq: '(min-width: #{$s-device}) and (max-width: #{$l-device})';
  }
  @if mq {
    @media #{$mq} {
      @content;
    }
  }
}

// -----------------------------------------------------------------------------------------------------
/// Sets the correct grid attributes depending on the amount of columns and offset spaces.
/// @param {unitless} $param-columns [0] - Amount of columns, can only be 3, 6 or 12.
/// @param {unitless/percentage} $param-offset [0] - This number defines the horizontal padding size. The offset has three scenarios:
/// * 0: Having no offset, the grid element would extend to the borders.
/// @output - Displays a grid and sets it's columns, gap and padding.
/// @example scss - Sass
///   div {
///     @include grid(
///       $param-columns: 12,
///       $param-offset: 4
///     );
///   }
/// @example css - Compiled CSS
///   div {
///     display: grid;
///     grid-gap: 24px;
///     grid-template-columns: repeat(12, minmax(0, 1fr));
///     padding-left: 96px;
///     padding-right: 96px;
///     width: 100%;
///   }
/// @group util_layouts
@mixin grid($columns: 0, $offset: 0) {
  display: grid;
  grid-gap: unit-x(1);
  grid-template-columns: repeat($columns, minmax(0, 1fr));
  width: 100%;

  @if not unitless($columns) {
    content: throw(
      'The value of "#{$columns}" for the grid\'s quantity of columns must be unitless.',
      value
    );
  } @else if $columns < 1 or $columns > 12 {
    content: throw(
      'The value of "#{$columns}" is outside the limits of quantity of columns, it must be between 1 and 12.',
      value
    );
  }

  @if unitless($offset) {
    padding-left: unit-x($offset);
    padding-right: unit-x($offset);
  } @else if unit($offset) == '%' {
    padding-left: $offset;
    padding-right: $offset;
  } @else {
    content: throw(
      'The offset parameter "#{$offset}" has the wrong unit, it must be unitless or percentage.',
      value
    );
  }
}

// -----------------------------------------------------------------------------------------------------
/// This mixin applies the logical combination of media queries and grids.
/// @output The standard grid layout for all pages.
/// @example scss - Sass
///   div {
///     @include layout;
///   }
/// @example css - Compiled CSS
///   div {
///     @media (max-width: 599px) and (min-width: 320px) {
///       display: grid;
///       grid-gap: 24px;
///       grid-template-columns: repeat(3, minmax(0, 1fr));
///       width: 100%;
///       padding-left: 24px;
///       padding-right: 24px;
///     }
///     @media (max-width: 899px) and (min-width: 600px) {
///       display: grid;
///       grid-gap: 24px;
///       grid-template-columns: repeat(6, minmax(0, 1fr));
///       width: 100%;
///       padding-left: 24px;
///       padding-right: 24px;
///     }
///     @media (max-width: 1199px) and (min-width: 900px) {
///       display: grid;
///       grid-gap: 24px;
///       grid-template-columns: repeat(6, minmax(0, 1fr));
///       width: 100%;
///       padding-left: 24px;
///       padding-right: 24px;
///     }
///     @media (max-width: 1799px) and (min-width: 1200px) {
///       display: grid;
///       grid-gap: 24px;
///       grid-template-columns: repeat(12, minmax(0, 1fr));
///       width: 100%;
///       padding-left: 10%;
///       padding-right: 10%;
///     }
///     @media (max-width: 2700px) and (min-width: 1800px) {
///       display: grid;
///       grid-gap: 24px;
///       grid-template-columns: repeat(12, minmax(0, 1fr));
///       width: 100%;
///       padding-left: 20%;
///       padding-right: 20%;
///     }
///   }
/// @group util_layouts
@mixin layout(
  $trio: 3,
  $sextet: 6,
  $dozen: 12,
  $offset-small: 1,
  $offset-desk: 10%,
  $offset-wide: 20%,
) {
  @include display-on(hand) {
    @include grid($columns: $trio, $offset: $offset-small);
  }

  @include display-on(page) {
    @include grid($columns: $sextet, $offset: $offset-small);
  }

  @include display-on(book) {
    @include grid($columns: $sextet, $offset: $offset-small);
  }

  @include display-on(desk) {
    @include grid($columns: $dozen, $offset: $offset-desk);
  }

  @include display-on(wide) {
    @include grid($columns: $dozen, $offset: $offset-wide);
  }
}

// -----------------------------------------------------------------------------------------------------
/// This mixin adds the correct column span to a grid item. It takes into account the number of columns in different displays. Also, if the span number is set to 0, a handy "display: none;" will be added.
/// @output A standard grid-column style for all displays.
/// @param {unitless} $trio [3] - Amount of span columns for a three column grid on a hand display.
/// @param {unitless} $sextet [6] - Amount of span columns for a six column grid on a page or book display.
/// @param {unitless} $dozen [12] - Amount of span columns for a twelve column grid on a desk or wide display.
/// @example scss - Sass
///   div {
///     @include column-span(2, 0, 8);
///   }
/// @example css - Compiled CSS
///   div {
///     @media (max-width: 599px) and (min-width: 320px) {
///       grid-column: 2 span;
///     }
///     @media (max-width: 1199px) and (min-width: 600px) {
///       display: none;
///     }
///     @media (max-width: 2700) and (min-width: 1200px) {
///       grid-column: 8 span;
///     }
///   }
/// @group util_layouts
@mixin column-span($trio: 3, $sextet: 6, $dozen: 12, $trio-skip: 0, $sextet-skip: 0, $dozen-skip: 0) {
  @include display-on('hand') {
    @if ($trio-skip == 0) {
      grid-column: span $trio;
    } @else {
      grid-column: $trio-skip / span $trio;
    }
    @if ($trio == 0) {
      display: none;
    }
  }

  @include display-on('page', $until: 'book') {
    @if ($sextet-skip == 0) {
      grid-column: span $sextet;
    } @else {
      grid-column: $sextet-skip / span $sextet;
    }
    @if ($sextet == 0) {
      display: none;
    }
  }

  @include display-on('desk', $until: 'wide') {
    @if ($dozen-skip == 0) {
      grid-column: span $dozen;
    } @else {
      grid-column: $dozen-skip / span $dozen;
    }
    @if ($dozen == 0) {
      display: none;
    }
  }
}

// -----------------------------------------------------------------------------------------------------
/// This mixin adds the correct column offset item class to a grid container. It creates a new class element, it should not be applied directly to a class.
/// @output A standard column-offset class with correct column-spans.
/// @param {unitless} $trio [3] - Amount of offset columns for a three column grid on a hand display.
/// @param {unitless} $sextet [6] - Amount of offset columns for a six column grid on a page or book display.
/// @param {unitless} $dozen [12] - Amount of offset columns for a twelve column grid on a desk or wide display.
/// @example scss - Sass
///   div {
///     @include column-offset(2, 0, 8);
///   }
/// @example css - Compiled CSS
///   div {
///     .column-offset-2-0-8 {
///       @media (max-width: 599px) and (min-width: 320px) {
///         grid-column: 2 span;
///       }
///       @media (max-width: 1199px) and (min-width: 600px) {
///         display: none;
///       }
///       @media (max-width: 2700) and (min-width: 1200px) {
///         grid-column: 8 span;
///       }
///     }
///   }
/// @group util_layouts
@mixin column-offset($trio: 3, $sextet: 6, $dozen: 12) {
  .column-offset-#{$trio}-#{$sextet}-#{$dozen} {
    @include column-span($trio, $sextet, $dozen);
  }
}

// -----------------------------------------------------------------------------------------------------
@mixin flex-column($gap) {
  display: flex;
  flex-direction: column;
  gap: unit-x($gap);
}

// -----------------------------------------------------------------------------------------------------
/// This mixin gives the base style for an label-box type input. It features a standard label with .input-required included, and the complete box styles from the input-box mixin.
@mixin input-box-label-combo {
  @include input-box;
  display: grid;
  width: 100%;

  &-label {
    @include txt-label;
    padding-left: unit-x($quarter);

    &.input-required::after {
      content: '*';
      color: clr('red', 'light');
      font-size: font-size('subheading');
      line-height: line-height('small');
      position: relative;
      top: 3px;
    }
  }
}

// -----------------------------------------------------------------------------------------------------
/// This mixin gives style to the input box's class (&-element). By default it adds style to the placeholder text, hover, focus, and disabled states.
@mixin input-box {
  &-element {
    padding: unit-x($third) unit-x($third) unit-x($third) - 2 unit-x($third);
    border: 0;
    border-radius: unit-x($quarter);
    background-color: clr('grey');
    border-bottom: unit-x($twelfth) solid clr('grey');
    color: clr('grey', 'white');

    &::placeholder {
      color: clr('grey', 'lightest');
    }

    &:hover {
      background-color: clr('grey', 'dark');
      border-bottom: unit-x($twelfth) solid clr('grey', 'dark');
    }

    &:focus {
      outline: 0;
      background-color: clr('grey', 'dark');
      border-bottom: unit-x($twelfth) solid clr('grey', 'darkest');
    }

    &:disabled,
    &:disabled:hover {
      cursor: not-allowed;
      background-color: clr('grey', 'lightest');
      border-bottom: unit-x($twelfth) solid clr('grey', 'lightest');
      color: clr('grey')
    }
  }
}